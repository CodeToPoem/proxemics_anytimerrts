<launch>
   <arg name="teleop" default="false"/>
   <arg name="no_teb" default="true"/>  <!--since teb_local_planner cannot be installed and compiled in Hydro, if you want to use this local planner, set this setting to false and comment out the move_base on the client side.-->

   <!-- ******* launch robot tf frames ******* -->
   <include file="$(find proxemics_anytimerrts)/launch/my_start_tf_test.launch" />


   <!-- ********* Run a static transform between /base_link and /base_footprint needed for SLAM ********* -->
   <node pkg="tf" type="static_transform_publisher" name="base_footprint_broadcaster" args="0 0 -0.065 0 0 0 /base_link /base_footprint 100" />

   <!-- ****** launch motor driver ************* -->
   <include file="$(find tobotdrivers)/launch/TobotDriver.launch"/>

   <!--******* turn on laser range finder ******* -->
   <node pkg="hokuyo_node" type="hokuyo_node" name="hokuyo_node">
       <param name="frame_id" type="string" value="hokuyo_link" />
   </node>


   <!-- ******* Turn on teleoperation on keyboard ******* -->
   <group if="$(arg teleop)">
       <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard"/>
   </group>
        
   <!-- ******** Turn on Xtion ************ -->
   <include file="$(find openni2_launch)/launch/openni2.launch"/>



   <!-- ********* Data throttle ********* -->
   <arg name="cam_ns" default="camera" />
   <node pkg="nodelet" type="nodelet" name="data_throttle" args="load rtabmap/data_throttle camera_nodelet_manager" output="screen">
      <param name="rate" type="double" value="5.0" />
      <!--inputs-->
      <remap from="rgb/image_in"         to="$(arg cam_ns)/rgb/image_rect_color" />
      <remap from="depth/image_in"       to="$(arg cam_ns)/depth/image_rect" />
      <remap from="rgb/camera_info_in"   to="$(arg cam_ns)/rgb/camera_info" />
      <!--outputs-->
      <remap from="rgb/image_out"        to="$(arg cam_ns)/data_throttled_image" />
      <remap from="depth/image_out"      to="$(arg cam_ns)/data_throttled_image_depth" />
      <remap from="rgb/camera_info_out"  to="$(arg cam_ns)/data_throttled_camera_info" />
   </node>
  
<!-- ******** SLAM *************-->
<include file="$(find mobile_safeguard_primitive)/launch/navigation/utils/SLAM/hector_slam.launch" >
  <arg name="scan_topic" value="/scan" />
</include>


<!--**************************************************************-->

<!-- *************** Inputs ****************-->
<arg name="in_odom" default="/odom" />
<!--<arg name="in_odom" default="/odometry/filtered" />-->
<arg name="scan_topic" default="/scan" />
<arg name="overall_out_vel" default="/cmd_vel" />
<arg name="cloud_in" default="/camera/depth_registered/points" />


<!-- ******* 1. Choose planner types ******* -->
<!--
Global planners:
Dijkstra: (blank, default)
AD*: SBPLLatticePlanner
ADRRT*: anytimeRRTs/AnytimeRRTsROS
Social Aware ADRRT*: proxemics_anytimerrts/ProxemicsAnytimeRRTs
lattice_planner (A*): lattice_planner/TBPlanner

Local Planners:
Dynamic Window Algorithm: dwa_local_planner/DWAPlannerROS
path follower: path_executer/PathFollower
Timed Elastic Band: teb_local_planner/TebLocalPlannerROS
Pose follower: pose_follower/PoseFollower
Time path follower: path_executer/PathFollower
-->

<arg name="global_planner" default="anytimeRRTs/AnytimeRRTsROS"/>
<arg name="local_planner" default="dwa_local_planner/DWAPlannerROS" />

<!-- ******** RGBD Odometry ********* -->
<!--
  <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">    
      <remap from="rgb/image"       to="/camera/rgb/image_raw"/>
      <remap from="depth/image"     to="/camera/depth/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
      <remap from="/odom" to="/rgbd_odom"/>  
      <remap from="scan" to="/beebot/laser/scan" />
      <param name="frame_id" type="string" value="camera_link"/>
      <param name="subscribe_depth" type="bool"   value="true"/>
      <param name="Odom/Holonomic" type="bool" value="false" />
      <param name="Odom/MaxFeatures" type="int" value="0" />
      <param name="Odom/ParticleSize" type="int" value="5000" />
      <param name="RGBD/PoseScanMatching" type="string" value="true" />
  </node>
-->

<!--********* Visual Odometry ******* -->
<!--
  <node pkg="viso2_ros" type="mono_odometer" name="mono_odometer" >
	  <remap from="/image" to="/camera/rgb/image_raw" />
	  <remap from="/camera_info" to="/camera/rgb/camera_info" />
	  <param name="camera_height" value="0.2485"/>
  </node>	
-->


<!--********* ekf sensor fusion ******** -->
<include file="$(find proxemics_anytimerrts)/launch/realBeebotLaunch/real_ekf_estimation.launch" >
    <arg name="wh_odom" value="/odom" />
</include>



<!-- ******** move_base ******** -->

<<<<<<< HEAD
<remap from="/odom" to="$(arg in_odom)" />
<include file="$(find proxemics_anytimerrts)/launch/realBeebotLaunch/real_move_base.launch" if="$(arg no_teb)">
  <arg name="scan_topic" value="$(arg scan_topic)" />
=======
<remap from="/odom" to="/odometry/filtered" />
<include file="$(find proxemics_anytimerrts)/launch/realBeebotLaunch/real_move_base.launch" >
  <arg name="scan_topic"     value="$(arg scan_topic)" />
>>>>>>> 9cc02abef1fe151b28e449c7e3d3a1f454d02fd8
  <arg name="global_planner" value="$(arg global_planner)" />
  <arg name="local_planner"  value="$(arg local_planner)" />
  <arg name="output_vel"     value="cmd_vel_mux/nav_cmd_vel" />
  <arg name="odom_in"        value="/odometry/filtered" />
</include>

<!--Original SBPL planner-->
<!--
<include file="$(find sbpl_lattice_planner)/launch/move_base_sbpl.launch" />
-->
<!--Dijkstra global planner + TEB local planner -->
<!--
<remap from="/cmd_vel" to="cmd_vel_mux/nav_cmd_vel" />
<remap from="/odom" to="$(arg in_odom)" />
<remap from="/laser/scan" to="/scan" />
<include file="$(find teb_local_planner)/launch/move_base.launch" />
-->




<!-- ******** Velocity Regulator with safety measure ***** -->
<include file="$(find proxemics_anytimerrts)/launch/gazebo_simulation/move_base/kobuki_controller_system.launch" >
  <!--Velocity Smoother's settings-->
  <arg name="raw_cmd_vel_topic"     value="cmd_vel_mux/output"/>                      <!--overall pu topic: related to cmd_vel_mux's published topic -->
  <arg name="smooth_cmd_vel_topic"  value="$(arg overall_out_vel)"/>                  <!--publish topic-->
  <arg name="robot_cmd_vel_topic"   value="cmd_vel_mux/output"/>                      <!--subscribed topic-->
  <arg name="odom_topic"            value="/odometry/filtered"/>                          <!--subscribed topic-->
</include>



</launch>
