<!-- 
  Turtlebot navigation simulation:
  - stage
  - map_server
  - move_base
  - static map
  - amcl
  - rviz view
 -->
<launch>
  <arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <param name="/use_sim_time" value="true"/>


  <!-- Name of the map to use (without path nor extension) and initial position -->
<!-- robopark_plan -->
<!--
  <arg name="map_file"       default=" $(env TURTLEBOT_STAGE_MAP_FILE)"/> 
  <arg name="world_file"     default=" $(env TURTLEBOT_STAGE_WORLD_FILE)"/>
-->
  <!--Room 302 -->

  <arg name="map_file"       default=" $(find proxemics_anytimerrts)/maps/room_302_map.yaml"/> 
  <arg name="world_file"     default=" $(find proxemics_anytimerrts)/maps/turtlebot_stage_test/room_302_map.world"/>


  <!-- ******* AMCL settings ************** -->
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.17"/>



  <!-- ******* HECTOR MAPPING settings **************** -->
  <arg name="broadcast_tf" default="false"/>
  <arg name="scan_topic" default="/scan" />


  <!--  ******************** Stage ********************  -->
  <!-- 
        Publishes transforms:
          /base_link -> /base_laser
          /base_footprint -> /base_link (identity)
          /odom -> base_footprint
        Publishes topics:
          /odom : odometry data from the simulated odometry
          /base_scan : laser data from the simulated laser
          /base_pose_ground_truth : the ground truth pose
        Parameters:
          base_watchdog_timeout : time (s) after receiving the last command on cmd_vel before stopping the robot
        Args:
          -g : run in headless mode.
  --> 
  <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
    <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="odom" to="odom"/>
    <remap from="base_pose_ground_truth" to="base_pose_ground_truth"/>
    <remap from="cmd_vel" to="mobile_base/commands/velocity"/>
    <remap from="base_scan" to="scan"/>
  </node>

  <!--  ***************** Robot Model *****************  -->
  <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="true"/>
  </node>

  <!-- Command Velocity multiplexer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!--  ************** Navigation  ***************  -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>

  <!--  ****** Maps *****  -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    <param name="frame_id" value="/map"/>
  </node>

  <!--AMCL publishes the map frame and the map topic --> 
  <include file="$(find turtlebot_navigation)/launch/includes/amcl.launch.xml">
    <arg name="scan_topic" value="scan"/>
    <arg name="use_map_topic" value="true"/>
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>


   <!-- ******** robot_localization using hector_mapping *************-->
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    
    <remap from="map" to="hector_map" />
    
    <!-- Frame names -->
    <param name="map_frame" value="map" />
    <param name="base_frame" value="base_footprint" />
    <param name="odom_frame" value="odom" />
    
    <!-- Tf use -->
    <param name="pub_map_odom_transform" value="$(arg broadcast_tf)"/>
    <param name="pub_map_scanmatch_transform" value="false"/>
    <param name="pub_odometry" value="true"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="2048"/>
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="map_update_angle_thresh" value="0.06" />
    
    <!-- Advertising config --> 
    <param name="scan_topic" value="$(arg scan_topic)"/>
  </node>

  <!-- ******* Fuse three pose estimates together with robot_localization ***** -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" clear_params="true">  
      <param name="frequency" value="30"/> 
      <param name="sensor_timeout" value="0.1"/>
      <param name="two_d_mode" value="true"/>
      <!-- Defaults to "map" if unspecified -->
      <param name="map_frame" value="map"/>
      <!-- Defaults to "odom" if unspecified -->
      <param name="odom_frame" value="odom"/>
      <!-- Defaults to "base_link" if unspecified -->
      <param name="base_link_frame" value="base_link"/>
      <!-- Defaults to the value of "odom_frame" if unspecified -->
      <param name="world_frame" value="odom"/>

      <param name="pose0" value="/amcl_pose" />
      <param name="pose1" value="/slam_out_pose" />
      <param name="odom0" value="/base_pose_ground_truth" />

      <!--Type: geometry_msgs/PoseWithCovarianceStamped -->
      <rosparam param="pose0_config">[false, false, false,
                                      false, false, true,
                                      false, false, true,
                                      false, false, false,
                                      false, false, false]</rosparam>
      
      <!--Type: geometry_msgs/PoseStamped -->
      <rosparam param="pose1_config">[true,  true,  false,
                                      false, false, true,
                                      true,  true,  false,
                                      false, false, true,
                                      false, false, false]</rosparam>

      <!--Type: nav_msgs/Odometry-->
      <rosparam param="odom0_config">[false, false, false,
                                      false, false, false,
                                      true,  true,  false,
                                      false, false, true,
                                      false, false, false]</rosparam>

      <param name="pose0_differential" value="false"/>
      <param name="pose1_differential" value="false"/>
      <param name="odom0_differential" value="true"/>

      <param name="pose0_relative" value="true"/>
      <param name="pose1_relative" value="true"/>
      <param name="odom0_relative" value="false"/>

      <param name="print_diagnostics" value="false"/>
  </node>

  <!--  **************** Visualisation ****************  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot_stage)/rviz/robot_navigation.rviz"/>
</launch>
